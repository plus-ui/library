---
interface ChangelogEntry {
  version: string;
  date: string;
  component: string;
  type: "feature" | "fix" | "improvement" | "breaking";
  description: string;
  details?: string[];
}

interface Props {
  componentFilter?: string;
  isModal?: boolean;
  maxEntries?: number;
}

const { componentFilter, isModal = false, maxEntries } = Astro.props;

// Changelog data - Bu gerçek projede ayrı bir JSON dosyasından gelecek
const changelogData: ChangelogEntry[] = [
  {
    version: "1.3.0",
    date: "2024-12-15",
    component: "button",
    type: "feature",
    description: "Added new size variants",
    details: [
      "Added xs and xxl size options",
      "Improved button padding consistency",
    ],
  },
  {
    version: "1.3.0",
    date: "2024-12-10",
    component: "button",
    type: "fix",
    description: "Fixed hover state accessibility",
    details: ["Improved contrast ratios", "Fixed keyboard navigation"],
  },
  {
    version: "1.2.7",
    date: "2024-12-05",
    component: "input",
    type: "improvement",
    description: "Enhanced validation feedback",
  },
  {
    version: "1.2.6",
    date: "2024-12-01",
    component: "button",
    type: "breaking",
    description: "Updated default variant",
    details: [
      "Changed default variant from 'filled' to 'outlined'",
      "Updated theme variables",
    ],
  },
  {
    version: "1.2.5",
    date: "2024-11-28",
    component: "select",
    type: "feature",
    description: "Added multi-select functionality",
  },
  {
    version: "1.2.4",
    date: "2024-11-25",
    component: "input",
    type: "fix",
    description: "Fixed placeholder text styling",
  },
];

// Filter entries by component if specified
let filteredEntries = componentFilter
  ? changelogData.filter(
      (entry) => entry.component.toLowerCase() === componentFilter.toLowerCase()
    )
  : changelogData;

// Limit entries if maxEntries is specified
if (maxEntries) {
  filteredEntries = filteredEntries.slice(0, maxEntries);
}

// Group entries by version for better display
const groupedEntries = filteredEntries.reduce(
  (acc, entry) => {
    if (!acc[entry.version]) {
      acc[entry.version] = [];
    }
    acc[entry.version].push(entry);
    return acc;
  },
  {} as Record<string, ChangelogEntry[]>
);

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

const getTypeIcon = (type: string) => {
  switch (type) {
    case "feature":
      return "✨";
    case "fix":
      return "🐛";
    case "improvement":
      return "⚡";
    case "breaking":
      return "💥";
    default:
      return "📝";
  }
};

const getTypeColor = (type: string) => {
  switch (type) {
    case "feature":
      return "text-color-success";
    case "fix":
      return "text-color-danger";
    case "improvement":
      return "text-color-info";
    case "breaking":
      return "text-color-warning";
    default:
      return "text-color-caption";
  }
};
---

<div
  class={`changelog-container not-content ${isModal ? "modal-changelog" : "page-changelog"}`}
>
  {
    componentFilter && (
      <div class="mb-6">
        <h2 class="text-xl font-semibold text-color-default mb-2">
          {componentFilter.charAt(0).toUpperCase() + componentFilter.slice(1)}{" "}
          Changelog
        </h2>
        <p class="text-sm text-color-caption">
          Recent changes and updates for the {componentFilter} component
        </p>
      </div>
    )
  }

  <!-- {
    !componentFilter && !isModal && (
      <div class="mb-6">
        <h1 class="text-2xl font-semibold text-color-default mb-2">
          Changelog
        </h1>
        <p class="text-color-caption">
          Track all updates, new features, improvements, and bug fixes across
          Plus UI components
        </p>
      </div>
    )
  } -->

  {
    filteredEntries.length === 0 ? (
      <div class="text-center py-8">
        <p class="text-color-caption">
          {componentFilter
            ? `No changelog entries found for ${componentFilter} component.`
            : "No changelog entries available."}
        </p>
      </div>
    ) : (
      <div class="changelog-timeline">
        {Object.entries(groupedEntries).map(([version, entries]) => (
          <div class="version-section">
            <div class="version-header">
              <div class="version-badge">
                <span class="version-number">v{version}</span>
                <span class="version-date">{formatDate(entries[0].date)}</span>
              </div>
            </div>

            <div class="timeline-entries">
              {entries.map((entry, index) => (
                <div class="timeline-entry">
                  <div class="timeline-marker">
                    <span class="timeline-icon">{getTypeIcon(entry.type)}</span>
                  </div>

                  <div class="timeline-content">
                    <div class="entry-meta">
                      <span class={`entry-type ${getTypeColor(entry.type)}`}>
                        {entry.type}
                      </span>
                      {!componentFilter && (
                        <span class="component-name">{entry.component}</span>
                      )}
                    </div>

                    <p class="entry-description">{entry.description}</p>

                    {entry.details && entry.details.length > 0 && (
                      <ul class="entry-details">
                        {entry.details.map((detail, detailIndex) => (
                          <li>{detail}</li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    )
  }

  {
    componentFilter && !isModal && (
      <div class="mt-8 p-4 bg-color-default-default rounded-lg">
        <p class="text-sm text-color-caption mb-2">
          Want to see the complete changelog?
        </p>
        <a
          href="/ui-library/changelog"
          class="text-sm text-color-link hover:text-color-primary"
        >
          View full changelog →
        </a>
      </div>
    )
  }
</div>

<style>
  .changelog-container {
    max-width: 100%;
  }

  .modal-changelog {
    max-height: 60vh;
    overflow-y: auto;
  }

  .page-changelog {
    max-width: 800px;
  }

  /* Timeline Layout */
  .changelog-timeline {
    position: relative;
  }

  .version-section {
    margin-bottom: 3rem;
  }

  .version-section:last-child {
    margin-bottom: 1rem;
  }

  /* Version Header */
  .version-header {
    margin-bottom: 1.5rem;
  }

  .version-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .version-number {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-color-color-default);
  }

  .version-date {
    font-size: 0.875rem;
    color: var(--text-color-color-caption);
    font-weight: 400;
  }

  /* Timeline Entries */
  .timeline-entries {
    position: relative;
    padding-left: 2rem;
  }

  .timeline-entries::before {
    content: "";
    position: absolute;
    left: 0.75rem;
    top: 0;
    bottom: 0;
    width: 2px;
    background: var(--border-color-color-default);
  }

  .timeline-entry {
    position: relative;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: flex-start;
    gap: 1rem;
  }

  .timeline-entry:last-child {
    margin-bottom: 0;
  }

  /* Timeline Marker */
  .timeline-marker {
    position: absolute;
    left: -2rem;
    top: 0.125rem;
    z-index: 1;
  }

  .timeline-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5rem;
    height: 1.5rem;
    background: var(--background-color-color-surface);
    border: 2px solid var(--border-color-color-default);
    border-radius: 50%;
    font-size: 0.75rem;
  }

  /* Timeline Content */
  .timeline-content {
    flex: 1;
    min-width: 0;
  }

  .entry-meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.25rem;
  }

  .entry-type {
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .component-name {
    font-size: 0.75rem;
    color: var(--text-color-color-caption);
    background: var(--background-color-color-default-default);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .entry-description {
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--text-color-color-default);
    margin: 0 0 0.5rem 0;
    font-weight: 500;
  }

  .entry-details {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .entry-details li {
    font-size: 0.8rem;
    line-height: 1.4;
    color: var(--text-color-color-caption);
    margin-bottom: 0.25rem;
    position: relative;
    padding-left: 1rem;
  }

  .entry-details li::before {
    content: "−";
    position: absolute;
    left: 0;
    color: var(--text-color-color-primary);
  }

  /* Type Colors - Use Tailwind classes instead of hard-coded styles */

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .timeline-entries {
      padding-left: 1.5rem;
    }

    .timeline-marker {
      left: -1.5rem;
    }

    .timeline-icon {
      width: 1.25rem;
      height: 1.25rem;
      font-size: 0.625rem;
    }

    .version-badge {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
    }

    .entry-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
    }
  }
</style>
