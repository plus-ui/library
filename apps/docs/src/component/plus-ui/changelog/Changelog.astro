---
import changelogData from '../../../data/changelog';
import type { ChangelogEntry } from '../../../data/changelog';

interface Props {
  componentFilter?: string;
  isModal?: boolean;
  maxEntries?: number;
}

const { componentFilter, isModal = false, maxEntries } = Astro.props;

// Filter entries by component if specified
let filteredEntries = componentFilter
  ? changelogData.filter(
      (entry: ChangelogEntry) => entry.component.toLowerCase() === componentFilter.toLowerCase()
    )
  : changelogData;

// Limit entries if maxEntries is specified
if (maxEntries) {
  filteredEntries = filteredEntries.slice(0, maxEntries);
}

// Group entries by version for better display
const groupedEntries = filteredEntries.reduce(
  (acc: Record<string, ChangelogEntry[]>, entry: ChangelogEntry) => {
    if (!acc[entry.version]) {
      acc[entry.version] = [];
    }
    acc[entry.version].push(entry);
    return acc;
  },
  {} as Record<string, ChangelogEntry[]>
);

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

const getTypeIcon = (type: string) => {
  switch (type) {
    case "feature":
      return "‚ú®";
    case "fix":
      return "üêõ";
    case "refactor":
      return "üßπ";
    case "docs":
      return "üìù";
    case "deps":
      return "‚¨ÜÔ∏è";
    case "release":
      return "üöÄ";
    case "breaking":
      return "üö®";
    case "improvement":
      return "‚ö°";
    default:
      return "üìù";
  }
};
const getTypeLabel = (type: string) => {
  switch (type) {
    case "feature":
      return "Feat";
    case "fix":
      return "Fix";
    case "refactor":
      return "Refactor";
    case "docs":
      return "Docs";
    case "deps":
      return "Deps";
    case "release":
      return "Release";
    case "breaking":
      return "Breaking";
    case "improvement":
      return "Update";
    default:
      return "Misc";
  }
};

const getTypeColor = (type: string) => {
  switch (type) {
    case "feature":
      return "text-color-success";
    case "fix":
      return "text-color-danger";
    case "refactor":
      return "text-color-info";
    case "docs":
      return "text-color-caption";
    case "deps":
      return "text-color-info";
    case "release":
      return "text-color-success";
    case "breaking":
      return "text-color-warning";
    case "improvement":
      return "text-color-info";
    default:
      return "text-color-caption";
  }
};
---

<div class={`not-content ${isModal ? "max-h-[60vh] overflow-y-auto" : "max-w-4xl"}`}>
  <!-- Header -->
  {
    componentFilter && (
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-color-default mb-2">
          {componentFilter.charAt(0).toUpperCase() + componentFilter.slice(1)} Changelog
        </h2>
        <p class="text-color-caption">
          Recent changes and updates for the {componentFilter} component
        </p>
      </div>
    )
  }

  <!-- Empty State -->
  {
    filteredEntries.length === 0 ? (
      <div class="text-center py-12">
        <div class="text-4xl mb-4">üìù</div>
        <h3 class="text-lg font-semibold text-color-default mb-2">No entries found</h3>
        <p class="text-color-caption">
          {componentFilter
            ? `No changelog entries found for ${componentFilter} component.`
            : "No changelog entries available."}
        </p>
      </div>
    ) : (
      <!-- Timeline -->
      <div class="relative">
        <!-- Timeline Line -->
        {Object.entries(groupedEntries).map(([version, entries]) => (
          <div class="relative pb-8">
            <div class="absolute left-[3px] top-8 bottom-6 w-0.5 bg-color-disabled-default"></div>
            <!-- Version Badge -->
            <div class="relative flex items-center gap-4 mb-2">
              <div class="w-2 h-2 bg-color-default-invert-default rounded-full relative z-10"></div>
              <div class="flex items-center gap-4">
                <h3 class="text-xl font-semibold text-color-default">v{version}</h3>
                <div class="text-xs text-color-default bg-color-default-default px-2 py-1 rounded">
                  <span>{formatDate((entries as ChangelogEntry[])[0].date)}</span>
                </div>
              </div>
            </div>
            <!-- Entries -->
            <div class="ml-8 space-y-6 ">
              {(entries as ChangelogEntry[]).map((entry: ChangelogEntry, index: number) => (
                <div class="group">
                  <div class="flex items-start gap-2">
                     <div class="flex-1">
                      <div class="">
                         <span class={`text-sm font-semibold uppercase -tracking-wider ${getTypeColor(entry.type)}`}> 
                           {getTypeLabel(entry.type)}
                         </span>
                        {!componentFilter && (
                          <span class="text-xs bg-color-default-default text-color-default px-2 py-1 ml-2 rounded">
                            {entry.component}
                          </span>
                        )}
                      <h4 class="inline font-semibold text-color-default text-lg ml-2">{entry.description}</h4>
                      </div>
                      {entry.details && entry.details.length > 0 && (
                        <ul class="space-y-1 pl-4 m-0">
                          {entry.details.map((detail: string, detailIndex: number) => (
                            <li class="text-sm text-color-default list-disc p-0 m-0">{detail}</li>
                          ))}
                        </ul>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    )
  }

  <!-- Footer -->
  {
    componentFilter && !isModal && (
      <div class="mt-12 text-center">
        <p class="text-color-caption mb-4">Want to see the complete changelog?</p>
        <a
          href="/ui-library/changelog"
          class="inline-flex items-center gap-2 text-color-primary hover:text-color-primary font-medium"
        >
          View full changelog
          <span>‚Üí</span>
        </a>
      </div>
    )
  }
</div>
