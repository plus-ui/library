---
interface ChangelogEntry {
  version: string;
  date: string;
  component: string;
  type: "feature" | "fix" | "refactor" | "docs" | "deps" | "release" | "breaking" | "improvement";
  description: string;
  details?: string[];
}

interface Props {
  componentFilter?: string;
  isModal?: boolean;
  maxEntries?: number;
}

const { componentFilter, isModal = false, maxEntries } = Astro.props;

// Changelog data - Bu ger√ßek projede ayrƒ± bir JSON dosyasƒ±ndan gelecek
const changelogData: ChangelogEntry[] = [
  {
    version: "1.4.0",
    date: "2024-12-20",
    component: "global",
    type: "release",
    description: "Major release with new components",
    details: [
      "Added 5 new components",
      "Performance improvements",
      "Updated design tokens",
    ],
  },
  {
    version: "1.3.5",
    date: "2024-12-18",
    component: "modal",
    type: "feature",
    description: "Added animation support",
    details: [
      "Added xs and xxl size options",
      "Improved button padding consistency",
    ],
  },
  {
    version: "1.3.4",
    date: "2024-12-17",
    component: "button",
    type: "refactor",
    description: "Cleaned up component structure",
    details: [
      "Improved code readability",
      "Removed deprecated methods",
      "Better prop naming",
    ],
  },
  {
    version: "1.3.3",
    date: "2024-12-16",
    component: "tooltip",
    type: "fix",
    description: "Fixed positioning bug on mobile",
    details: ["Improved viewport detection", "Fixed edge case calculations"],
  },
  {
    version: "1.3.2",
    date: "2024-12-15",
    component: "global",
    type: "deps",
    description: "Updated dependencies",
    details: [
      "Updated Lit to v3.1.0",
      "Security patch for dev dependencies",
    ],
  },
  {
    version: "1.3.1",
    date: "2024-12-14",
    component: "accordion",
    type: "docs",
    description: "Updated documentation examples",
    details: [
      "Added React examples",
      "Improved API reference",
      "Fixed typos in code samples",
    ],
  },
  {
    version: "1.3.0",
    date: "2024-12-12",
    component: "dropdown",
    type: "breaking",
    description: "Changed event naming convention",
    details: [
      "Renamed 'onChange' to 'onSelectionChange'",
      "Updated prop validation",
    ],
  },
  {
    version: "1.2.9",
    date: "2024-12-10",
    component: "input",
    type: "improvement",
    description: "Enhanced validation feedback",
    details: [
      "Added real-time validation",
      "Improved error message styling",
    ],
  },
  {
    version: "1.2.8",
    date: "2024-12-08",
    component: "card",
    type: "feature",
    description: "Added shadow variants",
    details: [
      "Added elevation levels",
      "Improved hover states",
    ],
  },
  {
    version: "1.2.7",
    date: "2024-12-05",
    component: "checkbox",
    type: "fix",
    description: "Fixed indeterminate state styling",
  },
  {
    version: "1.2.6",
    date: "2024-12-03",
    component: "global",
    type: "refactor",
    description: "Improved theme system architecture",
    details: [
      "Better CSS custom properties organization",
      "Reduced bundle size",
    ],
  },
  {
    version: "1.2.5",
    date: "2024-12-01",
    component: "select",
    type: "improvement",
    description: "Added search functionality",
    details: [
      "Type-to-search feature",
      "Improved keyboard navigation",
    ],
  },
];

// Filter entries by component if specified
let filteredEntries = componentFilter
  ? changelogData.filter(
      (entry) => entry.component.toLowerCase() === componentFilter.toLowerCase()
    )
  : changelogData;

// Limit entries if maxEntries is specified
if (maxEntries) {
  filteredEntries = filteredEntries.slice(0, maxEntries);
}

// Group entries by version for better display
const groupedEntries = filteredEntries.reduce(
  (acc, entry) => {
    if (!acc[entry.version]) {
      acc[entry.version] = [];
    }
    acc[entry.version].push(entry);
    return acc;
  },
  {} as Record<string, ChangelogEntry[]>
);

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};



const getTypeIcon = (type: string) => {
  switch (type) {
    case "feature":
      return "‚ú®";
    case "fix":
      return "üêõ";
    case "refactor":
      return "üßπ";
    case "docs":
      return "üìù";
    case "deps":
      return "‚¨ÜÔ∏è";
    case "release":
      return "üöÄ";
    case "breaking":
      return "üö®";
    case "improvement":
      return "‚ö°";
    default:
      return "üìù";
  }
};
const getTypeLabel = (type: string) => {
  switch (type) {
    case "feature":
      return "Feat";
    case "fix":
      return "Fix";
    case "refactor":
      return "Refactor";
    case "docs":
      return "Docs";
    case "deps":
      return "Deps";
    case "release":
      return "Release";
    case "breaking":
      return "Breaking";
    case "improvement":
      return "Update";
    default:
      return "Misc";
  }
};

const getTypeColor = (type: string) => {
  switch (type) {
    case "feature":
      return "text-color-success";
    case "fix":
      return "text-color-danger";
    case "refactor":
      return "text-color-info";
    case "docs":
      return "text-color-caption";
    case "deps":
      return "text-color-info";
    case "release":
      return "text-color-success";
    case "breaking":
      return "text-color-warning";
    case "improvement":
      return "text-color-info";
    default:
      return "text-color-caption";
  }
};
---

<div class={`not-content ${isModal ? "max-h-[60vh] overflow-y-auto" : "max-w-4xl"}`}>
  <!-- Header -->
  {
    componentFilter && (
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-color-default mb-2">
          {componentFilter.charAt(0).toUpperCase() + componentFilter.slice(1)} Changelog
        </h2>
        <p class="text-color-caption">
          Recent changes and updates for the {componentFilter} component
        </p>
      </div>
    )
  }

  <!-- Empty State -->
  {
    filteredEntries.length === 0 ? (
      <div class="text-center py-12">
        <div class="text-4xl mb-4">üìù</div>
        <h3 class="text-lg font-semibold text-color-default mb-2">No entries found</h3>
        <p class="text-color-caption">
          {componentFilter
            ? `No changelog entries found for ${componentFilter} component.`
            : "No changelog entries available."}
        </p>
      </div>
    ) : (
      <!-- Timeline -->
      <div class="relative">
        <!-- Timeline Line -->
        
          {Object.entries(groupedEntries).map(([version, entries]) => (
            <div class="relative pb-8">
              <div class="absolute left-[3px] top-8 bottom-6 w-0.5 bg-color-disabled-default"></div>

              <!-- Version Badge -->
              <div class="relative flex items-center gap-4 mb-2">
                <div class="w-2 h-2 bg-color-default-invert-default rounded-full relative z-10"></div>
                <div class="flex items-center gap-4">
                  <h3 class="text-xl font-semibold text-color-default">v{version}</h3>
                  <div class="text-xs text-color-default bg-color-default-default px-2 py-1 rounded">
                    <span>{formatDate(entries[0].date)}</span>
                  </div>
                </div>
              </div>

              <!-- Entries -->
              <div class="ml-8 space-y-6 ">
                {entries.map((entry, index) => (
                  <div class="group">
                    <div class="flex items-start gap-2">
                       <div class="flex-1">
                        <div class="flex items-center gap-2">
                          {/* <plus-tooltip size="sm" orientation="left" message={entry.type}>
                            <span class={`text-lg font-semibold uppercase tracking-wider ${getTypeColor(entry.type)}`}>
                              {getTypeIcon(entry.type)}
                            </span>
                          </plus-tooltip> */}
                           <span class={`text-sm font-semibold uppercase -tracking-wider ${getTypeColor(entry.type)}`}>
                             {getTypeLabel(entry.type)}
                           </span>
                          {!componentFilter && (
                            <span class="text-xs bg-color-default-default text-color-default px-2 py-1 rounded">
                              {entry.component}
                            </span>
                          )}
                        <h4 class="font-semibold text-color-default text-lg">{entry.description}</h4>
                        </div>
                        
                        {entry.details && entry.details.length > 0 && (
                          <ul class="space-y-1 pl-4 m-0">
                            {entry.details.map((detail, detailIndex) => (
                              <li class="text-sm text-color-default list-disc p-0 m-0">{detail}</li>
                            ))}
                          </ul>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
      </div>
    )
  }

  <!-- Footer -->
  {
    componentFilter && !isModal && (
      <div class="mt-12 text-center">
        <p class="text-color-caption mb-4">Want to see the complete changelog?</p>
        <a
          href="/ui-library/changelog"
          class="inline-flex items-center gap-2 text-color-primary hover:text-color-primary font-medium"
        >
          View full changelog
          <span>‚Üí</span>
        </a>
      </div>
    )
  }
</div>
