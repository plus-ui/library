---
/**
 * EmbedContent Component
 * ======================
 *
 * A versatile content embedding component that automatically detects and embeds
 * various types of web content including YouTube videos, CodeSandbox projects,
 * and Figma designs.
 *
 * @component EmbedContent
 * @example
 * ```astro
 * <EmbedContent url="https://youtube.com/watch?v=dQw4w9WgXcQ" />
 * <EmbedContent url="https://codesandbox.io/s/example" title="Custom Title" />
 * ```
 */

interface Props {
  /** The URL to embed or link to */
  url: string;
  /** Optional custom title override. If not provided, will be fetched automatically */
  title?: string;
  /** Enable lazy loading with intersection observer */
  lazy?: boolean;
}

const { url, title: providedTitle, lazy = true } = Astro.props;

/**
 * Fetches the page title from a given URL by parsing the HTML title tag
 * @param url - The URL to fetch the title from
 * @returns Promise<string | null> - The page title or null if not found
 */
async function getPageTitle(url: string): Promise<string | null> {
  try {
    const response = await fetch(url);
    if (!response.ok) return null;

    const html = await response.text();
    const match = html.match(/<title>(.*?)<\/title>/i);
    return match ? match[1].trim() : null;
  } catch (error) {
    console.error("Error fetching page title:", error);
    return null;
  }
}

/**
 * Fetches title from service-specific APIs for better accuracy
 * @param url - The URL to get special title for
 * @returns Promise<string | null> - Service-specific title or null
 */
async function getSpecialTitle(url: string): Promise<string | null> {
  if (isYouTube) {
    try {
      const videoId =
        new URL(url).searchParams.get("v") || url.split("youtu.be/")[1];
      if (!videoId) return null;

      const response = await fetch(
        `https://www.youtube.com/oembed?url=http://youtube.com/watch?v=${videoId}&format=json`
      );
      if (!response.ok) return null;

      const data = await response.json();
      return data.title || null;
    } catch (error) {
      console.error("Error fetching YouTube title:", error);
      return null;
    }
  }
  return null;
}

// Service detection
const isYouTube = url.includes("youtube.com") || url.includes("youtu.be");
const isCodeSandbox = url.includes("codesandbox.io");
const isFigma = url.includes("figma.com") && !url.includes("help.figma.com");

/**
 * Transforms a regular URL into an embeddable URL for supported services
 * @param url - The original URL
 * @returns string - The embed URL or empty string if not embeddable
 */
function getEmbedUrl(url: string): string {
  if (isYouTube) {
    if (url.includes("youtube.com/watch")) {
      return url.replace("watch?v=", "embed/");
    }
    return `https://www.youtube.com/embed/${url.split("youtu.be/")[1]}`;
  }

  if (isCodeSandbox) {
    return url.replace("/s/", "/embed/");
  }

  if (isFigma) {
    return `https://www.figma.com/embed?embed_host=share&url=${encodeURIComponent(url)}`;
  }

  return "";
}

// Content resolution
const specialTitle = await getSpecialTitle(url);
const pageTitle =
  providedTitle || specialTitle || (await getPageTitle(url)) || url;

const embedUrl = getEmbedUrl(url);
const canEmbed = isYouTube || isCodeSandbox || isFigma;
const favicon = `https://www.google.com/s2/favicons?sz=32&domain=${new URL(url).hostname}`;

// Generate unique ID for this embed
const embedId = `embed-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="embed-container" data-embed-id={embedId}>
  <div
    class={`embed-wrapper ${isYouTube ? "youtube-aspect-ratio" : ""} ${canEmbed ? "can-embed" : ""}`}
  >
    <!-- Header Card with Site Info -->
    <div class="embed-card">
      <div class="embed-info">
        <img src={favicon} alt="Site favicon" class="favicon" />
        <span class="embed-title">{pageTitle}</span>
      </div>
      <a
        href={url}
        target="_blank"
        rel="noopener noreferrer"
        class="visit-link"
      >
        <span>Visit</span>
        <svg
          width="12"
          height="12"
          viewBox="0 0 12 12"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M3.5 3L8.5 8M8.5 8V3.5M8.5 8H4"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </a>
    </div>

    <!-- Embedded Content -->
    {
      canEmbed && (
        <div class="embed-iframe-container" data-embed-url={embedUrl} data-lazy={lazy}>
          {!lazy ? (
            <iframe
              src={embedUrl}
              class="embed-iframe"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
              loading="lazy"
              title={pageTitle}
            />
          ) : (
            <div class="embed-placeholder">
              <div class="embed-loading">
                <svg class="embed-spinner" viewBox="0 0 50 50">
                  <circle cx="25" cy="25" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-dasharray="31.416" stroke-dashoffset="31.416">
                    <animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
                    <animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/>
                  </circle>
                </svg>
                <span>Loading content...</span>
              </div>
            </div>
          )}
        </div>
      )
    }
  </div>
</div>

{lazy && canEmbed && (
  <script define:vars={{ embedId, embedUrl, pageTitle }}>
    // Intersection Observer for lazy loading
    const observerCallback = (entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const container = entry.target;
          const iframeContainer = container.querySelector('.embed-iframe-container');
          const placeholder = container.querySelector('.embed-placeholder');
          
          if (iframeContainer && placeholder) {
            // Create and configure iframe
            const iframe = document.createElement('iframe');
            iframe.src = embedUrl;
            iframe.className = 'embed-iframe';
            iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
            iframe.setAttribute('allowfullscreen', '');
            iframe.setAttribute('loading', 'lazy');
            iframe.setAttribute('title', pageTitle);
            
            // Replace placeholder with iframe
            iframeContainer.replaceChild(iframe, placeholder);
            
            // Stop observing this element
            observer.unobserve(container);
            
            console.log('ðŸš€ Lazy loaded embed:', embedUrl);
          }
        }
      });
    };

    // Initialize observer
    const observer = new IntersectionObserver(observerCallback, {
      rootMargin: '50px 0px', // Load 50px before entering viewport
      threshold: 0.1
    });

    // Start observing
    const embedContainer = document.querySelector(`[data-embed-id="${embedId}"]`);
    if (embedContainer) {
      observer.observe(embedContainer);
    }
  </script>
)}

<style>
  .embed-container {
    margin: 1.5rem 0;
    border-radius: 0.75rem;
    overflow: hidden;
    border: 1px solid var(--sl-color-gray-5);
    background: var(--sl-color-bg);
    box-shadow:
      0 1px 3px 0 rgba(0, 0, 0, 0.1),
      0 1px 2px 0 rgba(0, 0, 0, 0.06);
  }

  .embed-wrapper {
    position: relative;
    background: var(--sl-color-bg);
  }

  .embed-card {
    padding: 1rem 1.25rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: var(--sl-color-bg-nav);
    border-bottom: 1px solid var(--sl-color-gray-5);
    transition: all 0.2s ease;
  }

  .can-embed .embed-card {
    border-bottom: none;
  }

  .embed-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    min-width: 0;
    flex: 1;
  }

  .favicon {
    width: 20px;
    height: 20px;
    border-radius: 4px;
    flex-shrink: 0;
  }

  .embed-title {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--sl-color-text);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
  }

  .visit-link {
    color: var(--sl-color-text);
    text-decoration: none;
    padding: 0.5rem 0.875rem;
    border-radius: 0.5rem;
    background: var(--sl-color-gray-6);
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.375rem;
    flex-shrink: 0;
  }

  .visit-link:hover {
    background: var(--sl-color-gray-5);
    transform: translateY(-1px);
  }

  .visit-link svg {
    opacity: 0.7;
    transition: opacity 0.2s ease;
  }

  .visit-link:hover svg {
    opacity: 1;
  }

  .embed-iframe-container {
    position: relative;
  }

  .embed-iframe {
    width: 100%;
    height: 450px;
    border: 0;
    display: block;
    background: var(--sl-color-bg);
  }

  .embed-placeholder {
    width: 100%;
    height: 450px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--sl-color-bg);
    border: 2px dashed var(--sl-color-gray-5);
    border-radius: 0.5rem;
    margin: 1rem;
  }

  .embed-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    color: var(--sl-color-text-accent);
  }

  .embed-spinner {
    width: 40px;
    height: 40px;
    color: var(--sl-color-accent);
  }

  .youtube-aspect-ratio {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
  }

  .youtube-aspect-ratio .embed-iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .youtube-aspect-ratio .embed-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    margin: 0;
    border-radius: 0;
  }

  /* Dark mode optimizations */
  [data-theme="dark"] .embed-container {
    border-color: var(--sl-color-gray-4);
  }

  [data-theme="dark"] .favicon {
    filter: brightness(0.9);
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .embed-container {
      margin: 1rem -1rem;
      border-radius: 0;
      border-left: none;
      border-right: none;
    }

    .embed-card {
      padding: 0.875rem 1rem;
    }

    .embed-title {
      font-size: 0.85rem;
    }

    .visit-link {
      padding: 0.5rem 0.75rem;
      font-size: 0.8rem;
    }

    .embed-iframe:not(.youtube-aspect-ratio .embed-iframe) {
      height: 300px;
    }

    .embed-placeholder {
      height: 300px;
    }
  }

  @media (max-width: 480px) {
    .embed-info {
      gap: 0.5rem;
    }

    .embed-title {
      font-size: 0.8rem;
    }

    .visit-link span {
      display: none;
    }

    .visit-link {
      padding: 0.5rem;
      min-width: 36px;
      justify-content: center;
    }
  }
</style>

