---
/**
 * CodePreview Component
 * =====================
 *
 * This component is used to display code examples in Plus UI documentation.
 * It supports both auto code generation and manual slot-based content.
 * It also provides an interactive playground and console output capture.
 *
 * Key Features:
 * ------------
 * 1. **Auto Code Generation**: Generates code for all frameworks from a single HTML example
 * 2. **Manual Slot Mode**: Use custom slot content for each framework
 * 3. **Variant System**: Automatic variants with data-variant-* attributes
 * 4. **Interactive Playground**: Real-time preview and controls
 * 5. **Console Output**: Capture and display console.log messages
 * 6. **Custom Scripts**: Execute custom JavaScript for interactions
 * 7. **Multiple Component Support**: Multiple components in a single CodePreview
 * 8. **Smart Formatting**: Each component on separate lines with proper indentation
 *
 * Usage Examples:
 * --------------
 *
 * 1. Auto Generation Mode (default):
 * ```astro
 * <CodePreview autoGeneration={true}>
 *   <plus-button>Click Me</plus-button>
 * </CodePreview>
 * ```
 *
 * 2. Manual Slot Mode:
 * ```astro
 * <CodePreview autoGeneration={false} customScript="console.log('clicked')">
 *   <plus-button id="my-button">Click Me</plus-button>
 *
 *   <Fragment slot="react">
 *     ```tsx
 *     import { PlusButton } from '@plusui/react';
 *     export default () => <PlusButton onClick={() => console.log('clicked')}>Click Me</PlusButton>;
 *     ```
 *   </Fragment>
 * </CodePreview>
 * ```
 *
 * 3. Variant System (auto generation only):
 * ```astro
 * <CodePreview horizontal autoGeneration={true}>
 *   <plus-button data-variant-kind="filled,outlined,text">Button</plus-button>
 * </CodePreview>
 * ```
 *
 * 4. Interactive Playground:
 * ```astro
 * <CodePreview
 *   horizontal
 *   showPlayground
 *   controls="kind,size,status"
 *   controlValues={{
 *     size: ["sm", "md", "lg"],
 *     status: ["default", "primary", "success"]
 *   }}
 * >
 *   <plus-button kind="filled" size="md">Button</plus-button>
 * </CodePreview>
 * ```
 *
 * Props:
 * ------
 * @param autoGeneration - Enable auto code generation (default: true)
 * @param customScript - Custom JavaScript to execute for interactions
 * @param showConsole - Show console output section (default: true when customScript provided)
 * @param title - Preview title (optional)
 * @param className - Additional CSS classes (optional)
 * @param id - Unique ID, auto-generated if not provided
 * @param horizontal - Display components side by side (default: false)
 * @param showCodeSandbox - Show CodeSandbox link (default: false)
 * @param showPlayground - Enable interactive playground (default: false)
 * @param controls - Playground controls in "kind,size,status" format
 * @param controlValues - Custom control values Record<string, string[]>
 *
 * How It Works:
 * ------------
 * 1. **parseVariants()**: Parses data-variant-* attributes
 * 2. **generateExamples()**: Creates example combinations from variants
 * 3. **formatCodeExamples()**: Formats multiple components properly
 * 4. **convertTo*()**: Performs syntax conversion for each framework
 * 5. **generateImports()**: Creates necessary import statements
 *
 * Framework Conversion:
 * --------------------
 * - HTML → React: plus-button → PlusButton, class → className
 * - HTML → Angular: Uses web components directly
 * - HTML → Vue: Uses web components directly
 * - HTML → Svelte: Uses web components directly
 *
 * Future Improvements:
 * -------------------
 * - [ ] Copy to clipboard feature
 * - [ ] CodeSandbox integration
 * - [ ] Custom framework slots support
 * - [ ] Real-time code updates (on playground changes)
 * - [ ] CSS custom properties playground
 *
 * Last Update: 2025.06.22 - Added multiple component formatting
 */

import { Tabs, TabItem, Code } from "@astrojs/starlight/components";

export interface Props {
  autoGeneration?: boolean;
  customScript?: string;
  showConsole?: boolean;
  title?: string;
  className?: string;
  id?: string;
  horizontal?: boolean;
  showCodeSandbox?: boolean;
  showPlayground?: boolean;
  controls?: string; // "kind,size,status" - props to control in playground
  controlValues?: Record<string, string[]>; // Custom control values
}

const {
  autoGeneration = true,
  customScript,
  showConsole = false,
  title,
  className,
  id = "preview-" + Math.random().toString(36).substring(2, 15),
  horizontal = false,
  showCodeSandbox = false,
  showPlayground = false,
  controls = "",
  controlValues = {},
} = Astro.props;

// Parse slot content for variants
const slotContent = await Astro.slots.render("default");

/**
 * Variant Parser
 * --------------
 * Parses data-variant-* attributes from HTML.
 *
 * Example: data-variant-kind="filled,outlined,text"
 * → { kind: ["filled", "outlined", "text"] }
 */
function parseVariants(html: string) {
  const variants: Record<string, string[]> = {};
  const variantRegex = /data-variant-(\w+)="([^"]+)"/g;
  let match;

  while ((match = variantRegex.exec(html)) !== null) {
    const [, propName, values] = match;
    variants[propName] = values.split(",").map((v) => v.trim());
  }

  return variants;
}

/**
 * ID Remover for Auto Generation
 * --------------------------------
 * Removes ID attributes from HTML for auto generation
 * (IDs should be used in custom scripts, not in generated code examples)
 */
function removeIds(html: string): string {
  return html.replace(/\s+id="[^"]*"/g, "");
}

/**
 * Example Generator
 * -----------------
 * Creates example combinations from variants.
 * Supports multiple variant properties with Cartesian product combinations.
 */
function generateExamples(html: string, variants: Record<string, string[]>) {
  // Remove IDs for auto-generated examples
  const cleanHtml = removeIds(html);

  if (Object.keys(variants).length === 0) {
    return [{ html: cleanHtml, name: "default" }];
  }

  const examples: Array<{
    html: string;
    name: string;
    propName?: string;
    propValue?: string;
  }> = [];

  // Get all variant property names and their values
  const variantEntries = Object.entries(variants);
  
  // Generate Cartesian product of all variant combinations
  function generateCombinations(entries: [string, string[]][], index = 0, current: Record<string, string> = {}): Record<string, string>[] {
    if (index === entries.length) {
      return [{ ...current }];
    }
    
    const [propName, values] = entries[index];
    const results: Record<string, string>[] = [];
    
    for (const value of values) {
      const newCurrent = { ...current, [propName]: value };
      results.push(...generateCombinations(entries, index + 1, newCurrent));
    }
    
    return results;
  }

  const combinations = generateCombinations(variantEntries);

  combinations.forEach((combination) => {
    let processedHtml = cleanHtml;
    const nameparts: string[] = [];
    
    // Apply all variant properties to the HTML
    for (const [propName, value] of Object.entries(combination)) {
      processedHtml = processedHtml.replace(
        new RegExp(`data-variant-${propName}="[^"]*"`, "g"),
        `${propName}="${value}"`
      );
      nameparts.push(`${propName}-${value}`);
    }
    
    examples.push({
      html: processedHtml,
      name: nameparts.join(", "),
      propName: Object.keys(combination)[0], // For backward compatibility
      propValue: Object.values(combination)[0], // For backward compatibility
    });
  });

  return examples;
}

/**
 * Framework Converters
 * --------------------
 * Converts HTML web component syntax to different frameworks.
 */

// React conversion: plus-button → PlusButton, class → className, etc.
function convertToReact(html: string) {
  // First do basic conversions
  let converted = html
    .replace(/<plus-([\w-]+)/g, (match, componentName) => {
      const pascalCase = componentName
        .split("-")
        .map((part: string) => part.charAt(0).toUpperCase() + part.slice(1))
        .join("");
      return "<Plus" + pascalCase;
    })
    .replace(/<\/plus-([\w-]+)>/g, (match, componentName) => {
      const pascalCase = componentName
        .split("-")
        .map((part: string) => part.charAt(0).toUpperCase() + part.slice(1))
        .join("");
      return "</Plus" + pascalCase + ">";
    })
    .replace(/class="/g, 'className="')
    .replace(/full-width/g, "fullWidth")
    .replace(/(\w+)-(\w+)="/g, (match, p1, p2) => {
      return p1 + p2.charAt(0).toUpperCase() + p2.slice(1) + '="';
    });

  // Return without formatting - formatCode will be called elsewhere
  return converted;
}

/**
 * Improved Code Formatter
 * ------------------------
 * Better HTML/JSX parsing that preserves structure
 */
function formatCode(codeString: string, framework: string): string {
  // Framework-specific base indentations
  const baseIndents: Record<string, string> = {
    react: "      ", // Inside return() statement
    angular: "    ", // Inside template string
    vue: "  ", // Inside <template>
    svelte: "", // Root level
    html: "" // Root level
  };
  
  const baseIndent = baseIndents[framework] || "";
  
  // Clean up and normalize
  let cleaned = codeString.trim().replace(/\s+/g, ' ');
  
  // Format with proper indentation
  const lines: string[] = [];
  let indentLevel = 0;
  let i = 0;
  
  while (i < cleaned.length) {
    if (cleaned[i] === '<') {
      // Find the end of this tag
      let tagEnd = i;
      while (tagEnd < cleaned.length && cleaned[tagEnd] !== '>') {
        tagEnd++;
      }
      tagEnd++; // Include the '>'
      
      const tag = cleaned.substring(i, tagEnd);
      
      if (tag.startsWith('</')) {
        // Closing tag
        indentLevel = Math.max(0, indentLevel - 1);
        lines.push(baseIndent + '  '.repeat(indentLevel) + tag);
      } else if (tag.endsWith('/>')) {
        // Self-closing tag
        lines.push(baseIndent + '  '.repeat(indentLevel) + tag);
      } else {
        // Opening tag
        lines.push(baseIndent + '  '.repeat(indentLevel) + tag);
        indentLevel++;
      }
      
      i = tagEnd;
    } else {
      // Text content - find next tag or end
      let textEnd = i;
      while (textEnd < cleaned.length && cleaned[textEnd] !== '<') {
        textEnd++;
      }
      
      const text = cleaned.substring(i, textEnd).trim();
      if (text) {
        lines.push(baseIndent + '  '.repeat(indentLevel) + text);
      }
      
      i = textEnd;
    }
  }
  
  return lines.join('\n');
}



// Angular conversion: uses web components directly
function convertToAngular(html: string) {
  return html;
}

// Vue conversion: uses web components directly
function convertToVue(html: string) {
  return html;
}

// Svelte conversion: uses web components directly
function convertToSvelte(html: string) {
  return html;
}

// HTML formatting
function convertToHtml(html: string) {
  return html;
}

/**
 * Import Generator
 * ----------------
 * Detects components from HTML and creates framework-appropriate import statements.
 * Example: <plus-button> → import { PlusButton } from '@plusui/react'
 */
function generateImports(html: string, framework: string) {
  const components: Set<string> = new Set();
  const componentRegex = /<plus-([\w-]+)/g;
  let match;

  while ((match = componentRegex.exec(html)) !== null) {
    const componentName = match[1]
      .split("-")
      .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
      .join("");
    components.add("Plus" + componentName);
  }

  switch (framework) {
    case "react":
      return `import { ${Array.from(components).join(", ")} } from '@plusui/react';

export default () => {
  return (
    <>
%content%
    </>
  );
};`;
    case "angular":
      return `import { Component } from '@angular/core';

@Component({
  selector: 'app-example',
  template: \`
%content%
  \`
})
export class ExampleComponent {}`;
    case "vue":
      return `<template>
%content%
</template>`;
    case "svelte":
      return `%content%`;
    default:
      return "%content%";
  }
}

// Auto generation logic (only when autoGeneration is true)
let variants: Record<string, string[]> = {};
let examples: Array<{ html: string; name: string }> = [];
let codeStrings: Record<string, string>;

if (autoGeneration) {
  variants = parseVariants(slotContent);
  examples = generateExamples(slotContent, variants);

  // Generate code strings for each framework (auto generation)
  codeStrings = {
    react: generateImports(examples[0]?.html || "", "react").replace(
      "%content%",
      formatCode(formatCodeExamples(examples, convertToReact, ""), "react")
    ),
    angular: generateImports(examples[0]?.html || "", "angular").replace(
      "%content%",
      formatCode(formatCodeExamples(examples, convertToAngular, ""), "angular")
    ),
    vue: generateImports(examples[0]?.html || "", "vue").replace(
      "%content%",
      formatCode(formatCodeExamples(examples, convertToVue, ""), "vue")
    ),
    svelte: formatCode(formatCodeExamples(examples, convertToSvelte, ""), "svelte"),
    html: formatCode(formatCodeExamples(examples, convertToHtml, ""), "html"),
  };
} else {
  // Manual slot mode - use original content for preview
  examples = [{ html: slotContent, name: "default" }];

  // Code strings will be provided via slots
  codeStrings = {
    react: "",
    angular: "",
    vue: "",
    svelte: "",
    html: "",
  };
}

/**
 * Smart Code Formatter
 * --------------------
 * Formats multiple components with proper indentation.
 * First component gets no indentation, others get consistent indentation.
 */
function formatCodeExamples(
  examples: any[],
  converter: (html: string) => string,
  baseIndent: string = ""
): string {
  if (examples.length === 1) {
    // Just convert the whole HTML as-is
    // Let formatCode handle the formatting
    return converter(examples[0].html);
  }

  return examples.map((ex) => converter(ex.html)).join("\n");
}

// Extract default values from component in slotContent
function extractDefaultValues(
  html: string,
  controls: string[]
): Record<string, string> {
  const defaults: Record<string, string> = {};

  controls.forEach((control) => {
    const regex = new RegExp(`${control}="([^"]*)"`, "i");
    const match = html.match(regex);
    if (match && match[1]) {
      defaults[control] = match[1];
    }
  });

  return defaults;
}

// Generate playground config
const defaultControlValues: Record<string, string[]> = {
  kind: ["filled", "outlined", "dashed", "text"],
  size: ["sm", "md", "lg"],
  status: ["default", "primary", "success", "warning", "danger", "info"],
  disabled: ["false", "true"],
  loading: ["false", "true"],
  "full-width": ["false", "true"],
};

const mergedControlValues = { ...defaultControlValues, ...controlValues };

const playgroundConfig =
  showPlayground && controls
    ? {
        component: slotContent.match(/<plus-(\w+)/)?.[1],
        controls: controls.split(",").map((c) => c.trim()),
        controlValues: mergedControlValues as Record<string, string[]>,
        defaultValues: extractDefaultValues(
          slotContent,
          controls.split(",").map((c) => c.trim())
        ),
      }
    : Object.keys(variants).length > 0
      ? {
          component: slotContent.match(/<plus-(\w+)/)?.[1],
          props: variants,
          defaultValues: Object.fromEntries(
            Object.entries(variants).map(([key, values]) => [key, values[0]])
          ) as Record<string, string>,
        }
      : null;
---

<div
  class={`not-content bg-color-default-default px-4 pt-4 pb-2 flex flex-col gap-2 rounded ${className}`}
>
  <div class="flex flex-row items-stretch">
    <div
      class="bg-color-surface p-2 rounded flex flex-col gap-6 group/preview flex-1"
    >
      <div class="flex justify-end h-6 invisible group-hover/preview:visible">
        {
          showCodeSandbox && (
            <plus-tooltip orientation="left" message="View in CodeSandbox">
              <plus-button kind="text">
                <span class="text-color-placeholder">
                  <i class="fa-solid fa-up-right-from-square" />
                </span>
              </plus-button>
            </plus-tooltip>
          )
        }
      </div>
      <div
        class={horizontal
          ? "flex flex-row gap-4 items-center justify-center flex-wrap mb-12"
          : "flex flex-col gap-4 items-center justify-center flex-wrap mb-12"}
        id={`preview-content-${id}`}
      >
        {examples.map((example) => <Fragment set:html={example.html} />)}
        <slot name="preview" />
      </div>
    </div>
    <!-- playground -->
    {
      showPlayground && playgroundConfig && (
        <div class="flex flex-col gap-4 bg-color-surface p-4 border-l-2 border-(--background-color-color-disabled-default) min-w-[200px]">
          {playgroundConfig.controls
            ? // New controls system
              playgroundConfig.controls.map((control: string) => (
                <div class="flex flex-col gap-2">
                  <label class="text-xs font-medium text-color-foreground-secondary">
                    {control}
                  </label>
                  <select
                    class="px-2 py-1 text-xs border border-color-default rounded bg-color-surface"
                    data-prop={control}
                    data-component={playgroundConfig.component}
                    data-preview-id={id}
                  >
                    {playgroundConfig.controlValues[control]?.map(
                      (value: string) => (
                        <option
                          value={value}
                          selected={
                            value ===
                            (playgroundConfig.defaultValues?.[control] ||
                              playgroundConfig.controlValues[control]?.[0])
                          }
                        >
                          {value}
                        </option>
                      )
                    )}
                  </select>
                </div>
              ))
            : playgroundConfig.props
              ? // Legacy variant system
                Object.entries(playgroundConfig.props).map(
                  ([propName, values]: [string, string[]]) => (
                    <div class="flex flex-col gap-2">
                      <label class="text-xs font-medium text-color-foreground-secondary">
                        {propName}
                      </label>
                      <select
                        class="px-2 py-1 text-xs border border-color-default rounded bg-color-surface"
                        data-prop={propName}
                        data-component={playgroundConfig.component}
                        data-preview-id={id}
                      >
                        {values.map((value: string) => (
                          <option
                            value={value}
                            selected={
                              value ===
                              playgroundConfig.defaultValues?.[propName]
                            }
                          >
                            {value}
                          </option>
                        ))}
                      </select>
                    </div>
                  )
                )
              : null}
        </div>
      )
    }
  </div>
  <div class="flex flex-col gap-2 w-full">
    <plus-button
      kind="text"
      size="sm"
      class="w-full"
      full-width="true"
      id={`toggle-button-${id}`}
    >
      <div class="flex flex-row gap-2 items-center justify-between w-25">
        <span id={`toggle-text-${id}`}>Show code</span>
        <i id={`toggle-icon-${id}`} class="fa-solid fa-chevron-down"></i>
      </div>
    </plus-button>
    <div id={`code-section-${id}`} class="hidden mt-4 mb-2">
      <Tabs syncKey="code-tab">
        <TabItem label="React">
          {autoGeneration ? (
            codeStrings.react && codeStrings.react.length > 0 ? (
              <Code code={codeStrings.react} lang="tsx" />
            ) : (
              <p>No React code available</p>
            )
          ) : (
            <slot name="react" />
          )}
        </TabItem>
        <TabItem label="Angular">
          {autoGeneration ? (
            codeStrings.angular && codeStrings.angular.length > 0 ? (
              <Code code={codeStrings.angular} lang="ts" />
            ) : (
              <p>No Angular code available</p>
            )
          ) : (
            <slot name="angular" />
          )}
        </TabItem>
        <TabItem label="Vue">
          {autoGeneration ? (
            codeStrings.vue && codeStrings.vue.length > 0 ? (
              <Code code={codeStrings.vue} lang="vue" />
            ) : (
              <p>No Vue code available</p>
            )
          ) : (
            <slot name="vue" />
          )}
        </TabItem>
        <TabItem label="Svelte">
          {autoGeneration ? (
            codeStrings.svelte && codeStrings.svelte.length > 0 ? (
              <Code code={codeStrings.svelte} lang="svelte" />
            ) : (
              <p>No Svelte code available</p>
            )
          ) : (
            <slot name="svelte" />
          )}
        </TabItem>
        <TabItem label="HTML">
          {autoGeneration ? (
            codeStrings.html && codeStrings.html.length > 0 ? (
              <Code code={codeStrings.html} lang="html" />
            ) : (
              <p>No HTML code available</p>
            )
          ) : (
            <slot name="html" />
          )}
        </TabItem>
      </Tabs>
    </div>

    <!-- Show Console Button -->
    {showConsole && (
      <plus-button
        kind="text"
        size="sm"
        class="w-full"
        full-width="true"
        id={`toggle-console-button-${id}`}
      >
        <div class="flex flex-row gap-2 items-center justify-between w-30">
          <span id={`toggle-console-text-${id}`}>Show console</span>
          <i id={`toggle-console-icon-${id}`} class="fa-solid fa-chevron-down"></i>
        </div>
      </plus-button>
      
      <!-- Console Section -->
      <div id={`console-section-${id}`} class="hidden mb-2">
        <div class="bg-color-default-invert-pressed text-color-success p-4 rounded-md font-mono text-xs">
          <div class="mb-2 text-color-base">Console Output:</div>
          <div id={`console-output-${id}`} class="whitespace-pre-wrap min-h-[60px]">
            <div class="text-color-caption italic">No console output yet. Try interacting with the components above.</div>
          </div>
          <plus-button
            kind="outlined"
            size="sm"
            id={`clear-console-${id}`}
            class="mt-2"
          >
            Clear Console
          </plus-button>
        </div>
      </div>
    )}
  </div>
</div>

<script define:vars={{ id, playgroundConfig, showConsole, customScript }}>
  // Client-side script for interactivity
  const toggleButton = document.getElementById(`toggle-button-${id}`);
  const toggleIcon = document.getElementById(`toggle-icon-${id}`);
  const toggleText = document.getElementById(`toggle-text-${id}`);
  const codeSection = document.getElementById(`code-section-${id}`);

  let isCodeVisible = false;

  const toggleCode = () => {
    isCodeVisible = !isCodeVisible;

    if (isCodeVisible) {
      codeSection.classList.remove("hidden");
      toggleIcon.className = "fa-solid fa-chevron-up";
      toggleText.textContent = "Hide code";
    } else {
      codeSection.classList.add("hidden");
      toggleIcon.className = "fa-solid fa-chevron-down";
      toggleText.textContent = "Show code";
    }
  };

  // Event listener for the plus-button
  toggleButton.addEventListener("plus-click", toggleCode);

  // Console functionality
  let addConsoleMessage = null;
  
  if (showConsole) {
    const toggleConsoleButton = document.getElementById(`toggle-console-button-${id}`);
    const toggleConsoleIcon = document.getElementById(`toggle-console-icon-${id}`);
    const toggleConsoleText = document.getElementById(`toggle-console-text-${id}`);
    const consoleSection = document.getElementById(`console-section-${id}`);
    const consoleOutput = document.getElementById(`console-output-${id}`);
    const clearConsoleButton = document.getElementById(`clear-console-${id}`);

    let isConsoleVisible = false;
    let consoleMessages = [];

    const toggleConsole = () => {
      isConsoleVisible = !isConsoleVisible;

      if (isConsoleVisible) {
        consoleSection.classList.remove("hidden");
        toggleConsoleIcon.className = "fa-solid fa-chevron-up";
        toggleConsoleText.textContent = "Hide console";
      } else {
        consoleSection.classList.add("hidden");
        toggleConsoleIcon.className = "fa-solid fa-chevron-down";
        toggleConsoleText.textContent = "Show console";
      }
    };

    addConsoleMessage = (message, type = 'log') => {
      const timestamp = new Date().toLocaleTimeString();
      const colorClass = type === 'error' ? 'text-color-danger-invert' : 
                        type === 'warn' ? 'text-color-warning-invert' : 'text-color-success-invert';
      
      consoleMessages.push({ message, type, timestamp, colorClass });
      updateConsoleDisplay();
    };

    const updateConsoleDisplay = () => {
      if (consoleMessages.length === 0) {
        consoleOutput.innerHTML = '<div class="text-color-base italic">No console output yet. Try interacting with the components above.</div>';
      } else {
        consoleOutput.innerHTML = consoleMessages
          .map(msg => `<div class="${msg.colorClass}">[${msg.timestamp}] ${msg.message}</div>`)
          .join('');
      }
    };

    const clearConsole = () => {
      consoleMessages = [];
      updateConsoleDisplay();
    };

    // Event listeners
    toggleConsoleButton.addEventListener("plus-click", toggleConsole);
    clearConsoleButton.addEventListener("plus-click", clearConsole);

    // Add a debug message to test console
    setTimeout(() => {
      addConsoleMessage('Console initialized for preview', 'log');
    }, 100);
  }

  // Execute custom script if provided (independent of showConsole)
  if (customScript) {
    try {
      // Create console wrapper functions that capture output if console is enabled
      const captureConsole = (originalMethod, type) => {
        return (...args) => {
          // Always call original console (don't break browser console)
          originalMethod.apply(console, args);
          
          // Capture for our preview only if console is enabled
          if (addConsoleMessage) {
            const message = args.map(arg => 
              typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
            ).join(' ');
            addConsoleMessage(message, type);
          }
        };
      };

      // Create console override for script execution
      const scriptConsole = {
        log: captureConsole(console.log, 'log'),
        error: captureConsole(console.error, 'error'),
        warn: captureConsole(console.warn, 'warn')
      };

      // Execute script with our console wrapper
      const func = new Function('console', customScript);
      func(scriptConsole);
      
    } catch (error) {
      // Log error to browser console
      console.error(`Script error in preview ${id}:`, error.message);
      
      // Also add to preview console if available
      if (addConsoleMessage) {
        addConsoleMessage(`Script error: ${error.message}`, 'error');
      }
    }
  }

  // Playground functionality - Each component isolated
  if (playgroundConfig) {
    // Select only this component's playground
    const playgroundSelects = document.querySelectorAll(
      `[data-preview-id="${id}"]`
    );
    const previewContentArea =
      document.querySelector(`#preview-content-${id}`) ||
      document.querySelector(`.group\\/preview > div:last-child`);

    playgroundSelects.forEach((select) => {
      select.addEventListener("change", updatePreview);
    });

    function updatePreview() {
      const currentProps = {};
      playgroundSelects.forEach((select) => {
        currentProps[select.dataset.prop] = select.value;
      });

      // Find the component in THIS preview area and update its properties
      const component = previewContentArea?.querySelector(
        `plus-${playgroundConfig.component}`
      );

      if (component) {
        // Clear all controlled attributes first
        playgroundConfig.controls?.forEach((control) => {
          component.removeAttribute(control);
        });

        // Set new values
        Object.entries(currentProps).forEach(([prop, value]) => {
          if (value === "true") {
            component.setAttribute(prop, "");
          } else if (value === "false") {
            component.removeAttribute(prop);
          } else if (value && value !== "") {
            component.setAttribute(prop, value);
          }
        });

        console.log("Preview updated:", component.outerHTML);
      } else {
        console.error("Component not found for preview update");
      }

      // Code examples are static - playground only updates preview
      // This keeps Starlight's complex Code component structure intact
    }

    // Code examples are static and generated server-side by Starlight
    // This preserves syntax highlighting, copy functionality, and UI structure
    // The playground only updates the preview component for interactive testing
  }
</script>


