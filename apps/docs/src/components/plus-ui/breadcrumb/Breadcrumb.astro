---
interface Props {
  separator?: string;
  homeText?: string;
  className?: string;
}

const { separator = "/", homeText = "Docs", className = "" } = Astro.props;

// Get the current pathname
const pathname = Astro.url.pathname;

// Function to format path segment for display
function formatSegment(segment: string): string {
  return segment
    .split("-")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
}

// Generate breadcrumb items from pathname
function generateBreadcrumbs(path: string) {
  const segments = path.split("/").filter((segment) => segment !== "");
  const breadcrumbs = [];

  // Add home
  breadcrumbs.push({
    label: homeText,
    href: "/",
    isActive: path === "/",
  });

  // Add path segments
  let currentPath = "";
  segments.forEach((segment, index) => {
    currentPath += `/${segment}`;
    const isLast = index === segments.length - 1;

    breadcrumbs.push({
      label: formatSegment(segment),
      href: currentPath,
      isActive: isLast,
    });
  });

  return breadcrumbs;
}

const breadcrumbs = generateBreadcrumbs(pathname);
---

<nav aria-label="Breadcrumb" class={`mb-4 ${className}`}>
  <ol
    class="flex items-center flex-wrap gap-2 sm:gap-1 list-none m-0 p-0 text-sm sm:text-xs"
  >
    {
      breadcrumbs.map((crumb, index) => (
        <li class="flex items-center gap-2 sm:gap-1 font-medium">
          {crumb.isActive ? (
            <span class="text-color-default" aria-current="page">
              {crumb.label}
            </span>
          ) : (
            <a
              href={crumb.href}
              class="text-color-placeholder hover:text-color-primary hover:underline transition-colors duration-200 no-underline"
            >
              {crumb.label}
            </a>
          )}

          {index < breadcrumbs.length - 1 && (
            <span class="text-color-default select-none" aria-hidden="true">
              {separator}
            </span>
          )}
        </li>
      ))
    }
  </ol>
</nav>
